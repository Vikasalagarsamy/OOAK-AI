#!/usr/bin/env node

/**
 * üéØ COMPLETE SUPABASE TO POSTGRESQL MIGRATION
 * Phase 12.4 - Replace all Supabase client usage with direct PostgreSQL connections
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

console.log('üöÄ Starting Phase 12.4: Complete Supabase to PostgreSQL Migration')

// PostgreSQL connection configuration
const PG_CONFIG = {
  host: 'localhost',
  port: 54322,
  database: 'postgres',
  user: 'postgres',
  password: 'postgres'
}

// 1. Create centralized PostgreSQL client
const pgClientContent = `import { Pool } from 'pg'

// Centralized PostgreSQL connection pool
export const pool = new Pool({
  host: '${PG_CONFIG.host}',
  port: ${PG_CONFIG.port},
  database: '${PG_CONFIG.database}',
  user: '${PG_CONFIG.user}',
  password: '${PG_CONFIG.password}',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

// Helper function for single queries
export async function query(text: string, params?: any[]) {
  const client = await pool.connect()
  try {
    const result = await client.query(text, params)
    return result
  } finally {
    client.release()
  }
}

// Helper function for transactions
export async function transaction(callback: (client: any) => Promise<any>) {
  const client = await pool.connect()
  try {
    await client.query('BEGIN')
    const result = await callback(client)
    await client.query('COMMIT')
    return result
  } catch (error) {
    await client.query('ROLLBACK')
    throw error
  } finally {
    client.release()
  }
}

// Connection health check
export async function healthCheck() {
  try {
    const result = await query('SELECT NOW() as current_time')
    console.log('‚úÖ PostgreSQL connection healthy:', result.rows[0].current_time)
    return true
  } catch (error) {
    console.error('‚ùå PostgreSQL connection failed:', error.message)
    return false
  }
}
`

async function createPostgreSQLClient() {
  console.log('üìù Creating centralized PostgreSQL client...')
  
  const libDir = path.join(process.cwd(), 'lib')
  if (!fs.existsSync(libDir)) {
    fs.mkdirSync(libDir, { recursive: true })
  }
  
  const clientPath = path.join(libDir, 'postgresql-client.ts')
  fs.writeFileSync(clientPath, pgClientContent)
  
  console.log('‚úÖ Created lib/postgresql-client.ts')
}

async function testPostgreSQLConnection() {
  console.log('üîç Testing PostgreSQL connection...')
  
  try {
    // Try to require pg module
    let Pool
    try {
      Pool = require('pg').Pool
    } catch (error) {
      console.log('üì¶ Installing pg dependency...')
      execSync('npm install pg @types/pg', { stdio: 'inherit' })
      Pool = require('pg').Pool
    }
    
    const testPool = new Pool(PG_CONFIG)
    
    const result = await testPool.query('SELECT NOW() as current_time, version() as pg_version')
    console.log('‚úÖ PostgreSQL connection successful!')
    console.log('   Time:', result.rows[0].current_time)
    console.log('   Version:', result.rows[0].pg_version.split(' ')[0])
    
    await testPool.end()
    return true
  } catch (error) {
    console.error('‚ùå PostgreSQL connection failed:', error.message)
    return false
  }
}

async function generateMigrationReport() {
  console.log('üìä Generating migration status report...')
  
  const supabaseFiles = []
  
  function scanDirectory(dir) {
    try {
      const files = fs.readdirSync(dir)
      
      files.forEach(file => {
        const filePath = path.join(dir, file)
        const stat = fs.statSync(filePath)
        
        if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
          scanDirectory(filePath)
        } else if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js')) {
          const content = fs.readFileSync(filePath, 'utf8')
          if (content.includes('supabase') || content.includes('@supabase')) {
            supabaseFiles.push(filePath.replace(process.cwd() + '/', ''))
          }
        }
      })
    } catch (error) {
      // Skip directories we can't read
    }
  }
  
  scanDirectory(process.cwd())
  
  const report = `# SUPABASE MIGRATION STATUS REPORT
Generated: ${new Date().toISOString()}

## FILES STILL USING SUPABASE: ${supabaseFiles.length}

${supabaseFiles.slice(0, 50).map(file => `- ${file}`).join('\n')}
${supabaseFiles.length > 50 ? `\n... and ${supabaseFiles.length - 50} more files` : ''}

## MIGRATION PRIORITY:

### HIGH PRIORITY (Core Services):
- services/dashboard-service.ts
- services/bug-service.ts  
- services/notification-service.ts
- services/activity-service.ts
- actions/dashboard-actions.ts
- actions/user-role-actions.ts

### MEDIUM PRIORITY (Components & Actions):
- All remaining /actions/*.ts files
- Components using Supabase queries
- API routes still using Supabase

### LOW PRIORITY (Scripts & Tests):
- Legacy .js scripts
- Test files
- Migration utilities

## NEXT ACTIONS REQUIRED:
1. Complete migration of high-priority files
2. Replace Supabase queries with direct PostgreSQL
3. Update all imports to use lib/postgresql-client.ts
4. Remove Supabase dependencies when complete

## ESTIMATED COMPLETION TIME: 
- High priority: 1-2 days
- Medium priority: 3-4 days  
- Low priority: 1-2 days
- Testing & validation: 1 day

Total: **1 week**
`

  fs.writeFileSync('SUPABASE_MIGRATION_REPORT.md', report)
  console.log(`‚úÖ Generated migration report: ${supabaseFiles.length} files need migration`)
  
  return supabaseFiles
}

async function createSampleMigration() {
  console.log('üìù Creating sample service migration...')
  
  // Create a sample migrated service to show the pattern
  const sampleServiceContent = `// üéØ MIGRATED: Dashboard Service - PostgreSQL Version
// Original: services/dashboard-service.ts (Supabase)
// Migrated: Direct PostgreSQL queries

import { query, transaction } from "@/lib/postgresql-client"

export async function getDashboardStats() {
  try {
    // Replace: const { count: companies } = await supabase.from("companies").select("*", { count: "exact", head: true })
    const companiesResult = await query('SELECT COUNT(*) as count FROM companies')
    const companies = parseInt(companiesResult.rows[0].count)

    // Replace: const { count: branches } = await supabase.from("branches").select("*", { count: "exact", head: true })  
    const branchesResult = await query('SELECT COUNT(*) as count FROM branches')
    const branches = parseInt(branchesResult.rows[0].count)

    // Replace: const { count: employees } = await supabase.from("employees").select("*", { count: "exact", head: true })
    const employeesResult = await query('SELECT COUNT(*) as count FROM employees')
    const employees = parseInt(employeesResult.rows[0].count)

    // Replace: const { count: clients } = await supabase.from("clients").select("*", { count: "exact", head: true })
    const clientsResult = await query('SELECT COUNT(*) as count FROM clients')
    const clients = parseInt(clientsResult.rows[0].count)

    return {
      companies,
      branches, 
      employees,
      clients,
      timestamp: new Date().toISOString()
    }
  } catch (error) {
    console.error('Dashboard stats error:', error)
    throw new Error('Failed to fetch dashboard statistics')
  }
}

// Example transaction usage
export async function createCompanyWithBranch(companyData: any, branchData: any) {
  return await transaction(async (client) => {
    // Insert company
    const companyResult = await client.query(
      'INSERT INTO companies (name, email, phone) VALUES ($1, $2, $3) RETURNING id',
      [companyData.name, companyData.email, companyData.phone]
    )
    
    const companyId = companyResult.rows[0].id
    
    // Insert branch
    const branchResult = await client.query(
      'INSERT INTO branches (company_id, name, location) VALUES ($1, $2, $3) RETURNING id',
      [companyId, branchData.name, branchData.location]
    )
    
    return {
      company_id: companyId,
      branch_id: branchResult.rows[0].id
    }
  })
}
`

  const samplePath = path.join(process.cwd(), 'services', 'dashboard-service-postgresql.ts')
  fs.writeFileSync(samplePath, sampleServiceContent)
  console.log('‚úÖ Created sample migrated service: services/dashboard-service-postgresql.ts')
}

async function createMigrationGuide() {
  console.log('üìñ Creating migration guide...')
  
  const guideContent = `# üéØ SUPABASE TO POSTGRESQL MIGRATION GUIDE

## Phase 12.4 - Complete Migration Strategy

### ‚úÖ COMPLETED STEPS:
1. Created centralized PostgreSQL client (lib/postgresql-client.ts)
2. Tested PostgreSQL connection
3. Generated migration report
4. Created sample migration patterns

### üîÑ IN PROGRESS:
- Manual migration of core services
- Replacing Supabase queries with SQL

### ‚ö†Ô∏è IMPORTANT PATTERNS:

#### BEFORE (Supabase):
\`\`\`typescript
import { createClient } from '@/lib/supabase'
const supabase = createClient()

const { data, error } = await supabase
  .from('users')
  .select('*')
  .eq('active', true)
\`\`\`

#### AFTER (PostgreSQL):
\`\`\`typescript
import { query } from '@/lib/postgresql-client'

const result = await query(
  'SELECT * FROM users WHERE active = $1',
  [true]
)
const data = result.rows
\`\`\`

### üõ†Ô∏è MIGRATION STEPS FOR EACH FILE:

1. **Replace imports:**
   - Remove: \`import { createClient } from '@/lib/supabase'\`
   - Add: \`import { query, transaction } from '@/lib/postgresql-client'\`

2. **Replace queries:**
   - \`.select()\` ‚Üí \`SELECT\` SQL
   - \`.insert()\` ‚Üí \`INSERT\` SQL  
   - \`.update()\` ‚Üí \`UPDATE\` SQL
   - \`.delete()\` ‚Üí \`DELETE\` SQL

3. **Handle errors:**
   - PostgreSQL throws exceptions instead of returning error objects
   - Use try/catch blocks

4. **Use transactions:**
   - For multi-table operations
   - Replace Supabase RPC with transaction function

### üöÄ NEXT ACTIONS:

1. **High Priority Migration (Today):**
   - [ ] services/dashboard-service.ts
   - [ ] actions/dashboard-actions.ts
   - [ ] services/notification-service.ts

2. **Medium Priority (This Week):**
   - [ ] All /actions/*.ts files
   - [ ] Core /services/*.ts files
   - [ ] Main components using database

3. **Testing & Validation:**
   - [ ] All APIs return same data
   - [ ] Performance benchmarks
   - [ ] Error handling works correctly

4. **Cleanup (Final Step):**
   - [ ] Remove Supabase dependencies
   - [ ] Update environment variables
   - [ ] Update documentation

### üìä PROGRESS TRACKING:
- Total files with Supabase: [Check SUPABASE_MIGRATION_REPORT.md]
- High priority files: 6
- Estimated completion: 1 week
- Current status: **MIGRATION IN PROGRESS**

### üîß TOOLS AVAILABLE:
- \`lib/postgresql-client.ts\` - Centralized database client
- \`services/dashboard-service-postgresql.ts\` - Migration example
- \`SUPABASE_MIGRATION_REPORT.md\` - Complete file list

---
**Next:** Start migrating high-priority services manually using the patterns above.
`

  fs.writeFileSync('MIGRATION_GUIDE_12.4.md', guideContent)
  console.log('‚úÖ Created comprehensive migration guide: MIGRATION_GUIDE_12.4.md')
}

async function main() {
  try {
    console.log('üèóÔ∏è  Phase 12.4: Complete Supabase to PostgreSQL Migration')
    console.log('=' .repeat(60))
    
    // Step 1: Test PostgreSQL connection
    console.log('\n1Ô∏è‚É£  Testing PostgreSQL connection...')
    const connectionOk = await testPostgreSQLConnection()
    if (!connectionOk) {
      console.error('‚ùå Cannot proceed without PostgreSQL connection')
      console.log('üí° Make sure your PostgreSQL container is running:')
      console.log('   docker-compose up -d')
      process.exit(1)
    }
    
    // Step 2: Create PostgreSQL client
    console.log('\n2Ô∏è‚É£  Creating centralized PostgreSQL client...')
    await createPostgreSQLClient()
    
    // Step 3: Generate migration status report
    console.log('\n3Ô∏è‚É£  Analyzing codebase for Supabase usage...')
    const supabaseFiles = await generateMigrationReport()
    
    // Step 4: Create sample migration
    console.log('\n4Ô∏è‚É£  Creating migration examples...')
    await createSampleMigration()
    
    // Step 5: Create comprehensive guide
    console.log('\n5Ô∏è‚É£  Creating migration guide...')
    await createMigrationGuide()
    
    console.log('\n' + '=' .repeat(60))
    console.log('üéâ Phase 12.4 Setup Complete!')
    console.log('=' .repeat(60))
    
    console.log('\nüìä MIGRATION STATUS:')
    console.log(`   ‚Ä¢ Files needing migration: ${supabaseFiles.length}`)
    console.log(`   ‚Ä¢ PostgreSQL client ready: ‚úÖ`)
    console.log(`   ‚Ä¢ Migration tools created: ‚úÖ`)
    console.log(`   ‚Ä¢ Documentation generated: ‚úÖ`)
    
    console.log('\nüìã IMMEDIATE NEXT STEPS:')
    console.log('   1. Review MIGRATION_GUIDE_12.4.md')
    console.log('   2. Review SUPABASE_MIGRATION_REPORT.md') 
    console.log('   3. Start with high-priority services:')
    console.log('      ‚Ä¢ services/dashboard-service.ts')
    console.log('      ‚Ä¢ actions/dashboard-actions.ts')
    console.log('      ‚Ä¢ services/notification-service.ts')
    console.log('   4. Test each migration thoroughly')
    console.log('   5. Continue with remaining files')
    
    console.log('\nüöÄ Ready to proceed to manual migration phase!')
    
  } catch (error) {
    console.error('‚ùå Migration setup failed:', error.message)
    process.exit(1)
  }
}

// Run migration setup
main().catch(console.error) 