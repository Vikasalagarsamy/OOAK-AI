import { createClient } from '@supabase/supabase-js'

// Initialize Supabase client
const supabase = createClient(
  'https://fmrmgfqaadjtdxywscpz.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZtcm1nZnFhYWRqdGR4eXdzY3B6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI2MjAwNzEsImV4cCI6MjA0ODE5NjA3MX0.69dEF5kMm8_Z-Tql7K3V1_uGGMYJshCLIQKLrTPqLF8'
)

async function verifyTeamPerformanceData() {
  console.log('üîç VERIFYING TEAM PERFORMANCE DATA...\n')

  try {
    // Get employees
    const { data: employees } = await supabase
      .from('employees')
      .select('id, name, email, department')
      .eq('department', 'SALES')

    console.log('üë• EMPLOYEES IN SALES:', employees?.length || 0)
    employees?.forEach(emp => {
      console.log(`   - ${emp.name} (ID: ${emp.id})`)
    })

    // Get quotations
    const { data: quotations } = await supabase
      .from('quotations')
      .select('id, client_name, total_amount, status, assigned_to, created_by')

    console.log('\nüí∞ QUOTATIONS:', quotations?.length || 0)
    quotations?.forEach(q => {
      console.log(`   - ${q.client_name}: ‚Çπ${q.total_amount} (${q.status}) [assigned_to: ${q.assigned_to}, created_by: ${q.created_by}]`)
    })

    // Get leads  
    const { data: leads } = await supabase
      .from('leads')
      .select('id, client_name, assigned_to, status')

    console.log('\nüìà LEADS:', leads?.length || 0)
    leads?.forEach(l => {
      console.log(`   - ${l.client_name}: ${l.status} [assigned_to: ${l.assigned_to}]`)
    })

    // Calculate what the fixed logic should show
    console.log('\nüßÆ CALCULATED TEAM PERFORMANCE:')
    console.log('=' .repeat(50))

    employees?.forEach(employee => {
      // Apply same logic as the fixed AIMLService
      const employeeQuotations = quotations?.filter(q => {
        if (q.assigned_to === employee.id) return true
        if (q.created_by === employee.id) return true
        
        // For Vikas Alagarsamy, assign all unassigned quotations
        if (employee.name === 'Vikas Alagarsamy' && (!q.assigned_to || q.assigned_to === null)) {
          return true
        }
        
        return false
      }) || []

      const employeeLeads = leads?.filter(l => l.assigned_to === employee.id) || []
      
      const convertedQuotations = employeeQuotations.filter(q => 
        q.status === 'approved' || q.status === 'completed'
      )
      
      const conversionRate = employeeLeads.length > 0 ? 
        convertedQuotations.length / employeeLeads.length : 0

      const totalRevenue = employeeQuotations
        .filter(q => q.status === 'approved' || q.status === 'completed')
        .reduce((sum, q) => sum + (q.total_amount || 0), 0)

      console.log(`\n${employee.name}:`)
      console.log(`   üìä Quotations: ${employeeQuotations.length} (created), ${convertedQuotations.length} (converted)`)
      console.log(`   üìà Leads: ${employeeLeads.length}`)
      console.log(`   üí∞ Revenue: ‚Çπ${totalRevenue.toLocaleString()}`)
      console.log(`   üìà Conversion Rate: ${(conversionRate * 100).toFixed(1)}%`)
      
      if (employeeQuotations.length > 0) {
        console.log(`   üìã Their Quotations:`)
        employeeQuotations.forEach(q => {
          console.log(`      - ${q.client_name}: ‚Çπ${q.total_amount} (${q.status})`)
        })
      }
    })

    console.log('\n‚úÖ VERIFICATION COMPLETE')
    console.log('\nThis is what the Team Performance report SHOULD show after the fix.')

  } catch (error) {
    console.error('‚ùå Error:', error.message)
  }
}

verifyTeamPerformanceData() 