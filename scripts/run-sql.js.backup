#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Get command line arguments
const sqlFile = process.argv[2]
if (!sqlFile) {
  console.error('Please provide the SQL file path as an argument')
  process.exit(1)
}

// Supabase configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('❌ Missing environment variables!')
  console.error('Required: NEXT_PUBLIC_SUPABASE_URL and (SUPABASE_SERVICE_ROLE_KEY or NEXT_PUBLIC_SUPABASE_ANON_KEY)')
  process.exit(1)
}

async function runSql() {
  console.log('🚀 Starting SQL execution...')
  
  try {
    const supabase = createClient(supabaseUrl, supabaseKey)
    
    // Read the SQL file
    const sqlContent = fs.readFileSync(sqlFile, 'utf8')
    
    // Split SQL content into individual statements
    const statements = sqlContent
      .split(';')
      .map(statement => statement.trim())
      .filter(statement => statement.length > 0 && !statement.startsWith('--'))
    
    console.log(`📊 Found ${statements.length} SQL statements to execute`)
    
    // Execute each statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i] + ';'
      
      if (statement.trim().length > 1) {
        console.log(`⚡ Executing statement ${i + 1}/${statements.length}...`)
        
        try {
          await supabase.rpc('exec_sql', { sql: statement })
          console.log(`✅ Statement ${i + 1} executed successfully`)
        } catch (error) {
          console.error(`❌ Error executing statement ${i + 1}:`, error.message)
          process.exit(1)
        }
      }
    }
    
    console.log('\n🎉 SQL execution completed!')
    
  } catch (error) {
    console.error('❌ Error:', error)
    process.exit(1)
  }
}

runSql() 