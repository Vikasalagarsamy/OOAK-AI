import { query, transaction } from '@/lib/postgresql-client'
import { NextRequest, NextResponse } from 'next/server';
import { AIConversationMemoryService } from '@/services/ai-conversation-memory-service';

export async function POST(request: NextRequest) {
  try {
    console.log('ü§ñ [AI AUTONOMOUS] Processing autonomous response via PostgreSQL...')
    
    const { clientInput, conversationContext = [] } = await request.json();

    if (!clientInput) {
      return NextResponse.json({ error: 'Client input is required' }, { status: 400 });
    }

    console.log(`ü§ñ Generating autonomous AI response for: "${clientInput}"`);

    // Generate AI response based on learned patterns
    const response = await AIConversationMemoryService.generateAutonomousResponse(
      clientInput,
      conversationContext
    );

    // Add some business context and personality
    const enhancedResponse = {
      ...response,
      responseWithPersonality: `${response.suggestedResponse}\n\n*This response was generated by our AI system based on successful patterns from ${response.learningSource}*`,
      metadata: {
        timestamp: new Date().toISOString(),
        clientIntent: AIConversationMemoryService['classifyClientIntent'](clientInput),
        confidence_level: response.confidence > 0.8 ? 'high' : response.confidence > 0.5 ? 'medium' : 'low',
        response_category: response.learningSource,
        autonomous_system: 'Photography Business AI v1.0'
      }
    };

    console.log(`‚úÖ AI Response Generated:`, {
      intent: enhancedResponse.metadata.clientIntent,
      confidence: enhancedResponse.metadata.confidence_level,
      source: response.learningSource
    });

    // Log the AI response interaction to database
    try {
      await query(`
        INSERT INTO ai_interactions (
          type,
          input_data,
          output_data,
          confidence_score,
          metadata,
          created_at
        ) VALUES ($1, $2, $3, $4, $5, NOW())
      `, [
        'autonomous_response',
        JSON.stringify({ clientInput, conversationContext }),
        JSON.stringify(enhancedResponse),
        response.confidence,
        JSON.stringify({
          intent: enhancedResponse.metadata.clientIntent,
          learning_source: response.learningSource,
          system_version: 'v1.0'
        })
      ])
    } catch (logError) {
      console.warn('‚ö†Ô∏è Failed to log AI interaction:', logError)
      // Don't fail the request for logging issues
    }

    return NextResponse.json({
      success: true,
      data: enhancedResponse
    });

  } catch (error) {
    console.error('‚ùå Autonomous AI response error (PostgreSQL):', error);
    return NextResponse.json({
      error: 'Failed to generate AI response',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// GET endpoint to show AI learning statistics
export async function GET(request: NextRequest) {
  try {
    console.log('ü§ñ [AI AUTONOMOUS] Getting system status via PostgreSQL...')
    
    const url = new URL(request.url);
    const demo = url.searchParams.get('demo') === 'true';

    if (demo) {
      const demoScenarios = [
        {
          scenario: 'Venue Discussion',
          clientInput: 'I need photography for my wedding at Padmavathi Palace. Can you cover outdoor events?',
          context: []
        },
        {
          scenario: 'Timing Concern',
          clientInput: 'I am quite busy this week. Can we schedule this call for next week?',
          context: []
        },
        {
          scenario: 'Buying Signal',
          clientInput: 'This sounds interesting. I would like to know more about your packages.',
          context: []
        }
      ];

      const demoResponses = [];
      
      for (const demo of demoScenarios) {
        const response = await AIConversationMemoryService.generateAutonomousResponse(
          demo.clientInput,
          demo.context
        );
        
        demoResponses.push({
          scenario: demo.scenario,
          client_input: demo.clientInput,
          ai_response: response.suggestedResponse,
          confidence: response.confidence,
          learning_source: response.learningSource
        });
      }

      return NextResponse.json({
        message: 'AI Autonomous Response System Demo',
        system_status: 'Learning from real conversations',
        total_scenarios: demoResponses.length,
        demo_responses: demoResponses,
        learning_capabilities: [
          'üéØ Price objection handling',
          'üìç Venue discussion expertise', 
          '‚è∞ Timing and scheduling management',
          'üí¨ Buying signal recognition',
          'ü§ù Relationship building responses'
        ]
      });
    }

    // Get AI system statistics from PostgreSQL
    try {
      const statsResult = await query(`
        SELECT 
          COUNT(*) as total_interactions,
          AVG(confidence_score) as avg_confidence,
          COUNT(CASE WHEN confidence_score > 0.8 THEN 1 END) as high_confidence_responses,
          COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as interactions_24h
        FROM ai_interactions
        WHERE type = 'autonomous_response'
      `)
      
      const stats = statsResult.rows[0] || {
        total_interactions: 0,
        avg_confidence: 0,
        high_confidence_responses: 0,
        interactions_24h: 0
      }

      return NextResponse.json({
        message: 'AI Conversation Memory System (PostgreSQL)',
        status: 'Active and Learning',
        statistics: {
          total_interactions: parseInt(stats.total_interactions),
          average_confidence: parseFloat(stats.avg_confidence),
          high_confidence_responses: parseInt(stats.high_confidence_responses),
          interactions_last_24h: parseInt(stats.interactions_24h)
        },
        capabilities: [
          'Real-time conversation analysis',
          'Speaker pattern recognition', 
          'Autonomous response generation',
          'Business outcome prediction',
          'Agent performance optimization'
        ],
        endpoints: {
          generate_response: 'POST /api/ai-autonomous-response',
          demo_system: 'GET /api/ai-autonomous-response?demo=true'
        }
      });
    } catch (statsError) {
      console.warn('‚ö†Ô∏è Could not fetch AI statistics:', statsError)
      
      return NextResponse.json({
        message: 'AI Conversation Memory System',
        status: 'Active and Learning',
        capabilities: [
          'Real-time conversation analysis',
          'Speaker pattern recognition', 
          'Autonomous response generation',
          'Business outcome prediction',
          'Agent performance optimization'
        ],
        endpoints: {
          generate_response: 'POST /api/ai-autonomous-response',
          demo_system: 'GET /api/ai-autonomous-response?demo=true'
        }
      });
    }

  } catch (error) {
    console.error('‚ùå AI system status error (PostgreSQL):', error);
    return NextResponse.json({
      error: 'Failed to get AI system status',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 