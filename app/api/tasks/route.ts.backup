import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { getCurrentUser } from '@/actions/auth-actions'

// GET /api/tasks - Fetch AI tasks with proper role-based filtering
export async function GET(request: NextRequest) {
  try {
    const supabase = createClient()
    
    // Get current user and role for security filtering
    console.log('üîç Starting getCurrentUser...')
    let currentUser
    try {
      currentUser = await getCurrentUser()
      console.log('üîç getCurrentUser result:', currentUser ? `${currentUser.username} (${currentUser.roleName})` : 'null')
    } catch (authError: any) {
      console.error('‚ùå getCurrentUser failed:', authError)
      return NextResponse.json(
        { error: 'Authentication failed', details: authError.message },
        { status: 401 }
      )
    }
    
    if (!currentUser) {
      console.log('‚ùå No current user found')
      return NextResponse.json(
        { error: 'Unauthorized access' },
        { status: 401 }
      )
    }
    
    console.log(`üîê Tasks request from user: ${currentUser.username}, role: ${currentUser.roleName}, employeeId: ${currentUser.employeeId}`)
    
    // Determine filtering based on role - join with employees only (leads will be fetched separately)
    let query = supabase
      .from('ai_tasks')
      .select(`
        *,
        assigned_employee:employees!assigned_to_employee_id(
          id,
          first_name,
          last_name,
          job_title
        )
      `)
      .order('created_at', { ascending: false })
      .limit(100)
    
    // Check for personal scope query parameter
    const url = new URL(request.url)
    const scope = url.searchParams.get('scope')

    if (scope === 'personal') {
      // Strict personal filtering: only show tasks assigned to the current user
      // Exclude completed tasks that have generated quotations (they should move to approval workflow)
      if (currentUser.employeeId) {
        query = query
          .eq('assigned_to_employee_id', currentUser.employeeId)
          .or('status.neq.completed,quotation_id.is.null')
        console.log(`üîê [Personal Scope] Only active tasks for employee ID: ${currentUser.employeeId}`)
      } else {
        console.log('üîê [Personal Scope] Employee ID not found, returning empty result')
        return NextResponse.json([])
      }
    } else {
      // Department head logic: Admins see all, department heads see their department, others see only their own
      const isDepartmentHead = currentUser.roleName && currentUser.roleName.endsWith('Head')

      if (currentUser.roleName === 'Administrator' || currentUser.isAdmin) {
        // Admins see all tasks
        console.log('üîê Admin access - showing all tasks')
      } else if (isDepartmentHead) {
        // Department head: get their department_id
        console.log('üîê Department head detected, checking department...')
        try {
          const { data: headEmployee, error: headError } = await supabase
            .from('employees')
            .select('department_id')
            .eq('id', currentUser.employeeId)
            .single()
          
          if (headError) {
            console.error('‚ùå Error fetching department for head:', headError)
            return NextResponse.json([])
          }
          
          if (!headEmployee || !headEmployee.department_id) {
            console.log('üîê Department head but no department found, returning empty result')
            return NextResponse.json([])
          }
          
          // Get all employees in this department
          const { data: deptEmployees, error: deptError } = await supabase
            .from('employees')
            .select('id')
            .eq('department_id', headEmployee.department_id)
          
          if (deptError) {
            console.error('‚ùå Error fetching department employees:', deptError)
            return NextResponse.json([])
          }
          
          if (!deptEmployees || deptEmployees.length === 0) {
            console.log('üîê No employees found in department, returning empty result')
            return NextResponse.json([])
          }
          
          const employeeIds = deptEmployees.map(e => e.id)
          query = query.in('assigned_to_employee_id', employeeIds)
          console.log(`üîê Department head access - showing tasks for department_id ${headEmployee.department_id}, employees: ${employeeIds}`)
        } catch (deptError) {
          console.error('‚ùå Exception in department head logic:', deptError)
          return NextResponse.json([])
        }
      } else {
        // Regular employees only see tasks assigned to them
        if (currentUser.employeeId) {
          query = query.eq('assigned_to_employee_id', currentUser.employeeId)
          console.log(`üîê Strict filtering: Only tasks for employee ID: ${currentUser.employeeId}`)
        } else {
          console.log('üîê Employee ID not found, returning empty result')
          return NextResponse.json([])
        }
      }
    }
    
    console.log('üîç Executing database query...')
    const { data: tasks, error: tasksError } = await query

    if (tasksError) {
      console.error('‚ùå Error fetching AI tasks:', tasksError)
      return NextResponse.json(
        { error: 'Failed to fetch tasks', details: tasksError.message },
        { status: 500 }
      )
    }

    console.log(`üîç Database returned ${tasks?.length || 0} tasks`)

    // Get all unique lead IDs from tasks to fetch phone numbers separately
    const leadIds = tasks
      ?.filter(task => task.lead_id)
      .map(task => task.lead_id)
      .filter((id, index, self) => self.indexOf(id) === index) || []

    // Fetch lead phone numbers in separate query if there are leads
    let leadsMap = new Map()
    if (leadIds.length > 0) {
      console.log('üìû Fetching lead phone numbers for IDs:', leadIds)
      const { data: leads, error: leadsError } = await supabase
        .from('leads')
        .select('id, phone, country_code, whatsapp_number')
        .in('id', leadIds)

      console.log('üìû Leads query result:', { leads, error: leadsError })
      
      if (!leadsError && leads) {
        leads.forEach(lead => {
          console.log(`üìû Lead ${lead.id}: phone=${lead.phone}`)
          leadsMap.set(lead.id, lead)
        })
      }
    }

    // Get all unique quotation IDs from tasks
    const quotationIds = tasks
      ?.filter(task => task.quotation_id)
      .map(task => task.quotation_id)
      .filter((id, index, self) => self.indexOf(id) === index) || []

    // Fetch all quotation data in single query if there are quotations
    let quotationsMap = new Map()
    if (quotationIds.length > 0) {
      console.log('üìã Fetching quotations for IDs:', quotationIds)
      const { data: quotations, error: quotationsError } = await supabase
        .from('quotations')
        .select('id, slug, workflow_status')
        .in('id', quotationIds)

      console.log('üìã Quotations query result:', { quotations, error: quotationsError })
      
      if (!quotationsError && quotations) {
        quotations.forEach(q => {
          console.log(`üìã Quotation ${q.id}: slug=${q.slug}`)
          quotationsMap.set(q.id, q)
        })
      }
    }

    // Combine tasks with lead and quotation data and fix assigned_to field
    const optimizedTasks = tasks?.map(task => {
      const quotation = quotationsMap.get(task.quotation_id) || null
      const lead = leadsMap.get(task.lead_id) || null
      
      // Fix assigned_to field using employee data
      let assignedToName = task.assigned_to
      if (task.assigned_employee) {
        assignedToName = `${task.assigned_employee.first_name} ${task.assigned_employee.last_name}`.trim()
      }
      
      // Get client phone from lead data (only use phone field that exists)
      let clientPhone = null
      if (lead && lead.phone) {
        clientPhone = lead.phone
      }
      
      return {
        ...task,
        assigned_to: assignedToName,
        client_phone: clientPhone,
        quotation_approval_status: null, // Column doesn't exist in quotations table
        quotation_workflow_status: quotation?.workflow_status || null,
        quotation_slug: quotation?.slug || null
      }
    }) || []

    console.log(`üìã Fetched ${optimizedTasks.length} AI tasks with ${quotationIds.length} quotations and ${leadIds.length} leads in 3 optimized queries`)
    return NextResponse.json(optimizedTasks)
  } catch (error: any) {
    console.error('‚ùå Exception in GET /api/tasks:', error)
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    )
  }
}

// POST /api/tasks - Create a new AI task
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ POST /api/tasks - Starting task creation...')
    
    let body
    try {
      body = await request.json()
      console.log('üìù Request body received:', JSON.stringify(body, null, 2))
    } catch (jsonError: any) {
      console.error('‚ùå Failed to parse JSON from request:', jsonError)
      return NextResponse.json(
        { error: 'Invalid JSON in request body', details: jsonError.message },
        { status: 400 }
      )
    }
    
    const supabase = createClient()
    
    // Validate required fields
    if (!body.title) {
      console.log('‚ùå Validation failed: Missing title')
      return NextResponse.json(
        { error: 'Missing required field: title' },
        { status: 400 }
      )
    }

    console.log('‚úÖ Validation passed, preparing task data...')

    // Prepare task data with minimal required fields only and ensure all values are serializable
    const taskData = {
      task_title: String(body.title || ''),
      task_description: String(body.description || ''),
      task_type: String(body.task_type || 'general'),
      priority: String(body.priority || 'medium'),
      status: String(body.status || 'pending'),
      assigned_to_employee_id: body.assigned_to_employee_id ? Number(body.assigned_to_employee_id) : null,
      due_date: body.due_date || null,
      lead_id: body.lead_id ? Number(body.lead_id) : null,
      client_name: String(body.client_name || ''),
      business_impact: String(body.business_impact || 'medium'),
      estimated_value: Number(body.estimated_value || 0)
    }

    console.log('üìã Prepared task data:', JSON.stringify(taskData, null, 2))

    // Test JSON serialization before sending to database
    try {
      JSON.stringify(taskData)
      console.log('‚úÖ Task data is JSON serializable')
    } catch (serializationError: any) {
      console.error('‚ùå Task data is not JSON serializable:', serializationError)
      return NextResponse.json(
        { error: 'Task data contains non-serializable values', details: serializationError.message },
        { status: 400 }
      )
    }

    console.log('üîÑ Attempting to insert into ai_tasks table...')
    const { data: task, error } = await supabase
      .from('ai_tasks')
      .insert(taskData)
      .select('*')

    if (error) {
      console.error('‚ùå Supabase error creating AI task:', error)
      console.error('‚ùå Error details:', JSON.stringify(error, null, 2))
      return NextResponse.json(
        { error: 'Failed to create task', details: error.message, supabaseError: error },
        { status: 500 }
      )
    }

    // Since insert returns an array, get the first item
    const createdTask = Array.isArray(task) ? task[0] : task

    if (!createdTask) {
      console.error('‚ùå No task was created - empty result')
      return NextResponse.json(
        { error: 'Task creation failed - no data returned' },
        { status: 500 }
      )
    }

    console.log('‚úÖ AI task created successfully:', createdTask.id)
    
    // Create a clean, serializable response object
    const responseTask = {
      id: createdTask.id,
      task_title: createdTask.task_title,
      task_description: createdTask.task_description,
      task_type: createdTask.task_type,
      priority: createdTask.priority,
      status: createdTask.status,
      assigned_to_employee_id: createdTask.assigned_to_employee_id,
      due_date: createdTask.due_date,
      lead_id: createdTask.lead_id,
      client_name: createdTask.client_name,
      business_impact: createdTask.business_impact,
      estimated_value: createdTask.estimated_value,
      created_at: createdTask.created_at,
      updated_at: createdTask.updated_at
    }

    return NextResponse.json(responseTask, { status: 201 })
  } catch (error: any) {
    console.error('‚ùå Exception in POST /api/tasks:', error)
    console.error('‚ùå Exception stack:', error.stack)
    return NextResponse.json(
      { error: 'Internal server error', details: error.message, stack: error.stack },
      { status: 500 }
    )
  }
} 