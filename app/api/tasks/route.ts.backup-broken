import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { getCurrentUser } from '@/lib/auth-utils'

// GET /api/tasks - Fetch AI tasks with proper role-based filtering
export async function GET() {
  try {
    console.log('📋 [TASKS] Simple tasks API called')
    
    const { createClient } = await import('@/lib/supabase')
    const supabase = createClient()
    
    // Return all tasks for now (we'll fix filtering later)
    const { data: tasks, error } = await supabase
      .from('ai_tasks')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(20)

    if (error) {
      console.error('❌ [TASKS] Database error:', error)
      return NextResponse.json({ error: 'Database error' }, { status: 500 })
    }

    console.log(`✅ [TASKS] Returning ${tasks?.length || 0} tasks`)
    return NextResponse.json(tasks || [])

  } catch (error: any) {
    console.error('❌ [TASKS] Error:', error)
    return NextResponse.json({ error: 'Server error' }, { status: 500 })
  }
}

// POST /api/tasks - Create a new AI task
export async function POST(request: NextRequest) {
  try {
    console.log('🔄 POST /api/tasks - Starting task creation...')
    
    let body
    try {
      body = await request.json()
      console.log('📝 Request body received:', JSON.stringify(body, null, 2))
    } catch (jsonError: any) {
      console.error('❌ Failed to parse JSON from request:', jsonError)
      return NextResponse.json(
        { error: 'Invalid JSON in request body', details: jsonError.message },
        { status: 400 }
      )
    }
    
    const supabase = createClient()
    
    // Validate required fields
    if (!body.title) {
      console.log('❌ Validation failed: Missing title')
      return NextResponse.json(
        { error: 'Missing required field: title' },
        { status: 400 }
      )
    }

    console.log('✅ Validation passed, preparing task data...')

    // Prepare task data with minimal required fields only and ensure all values are serializable
    const taskData = {
      task_title: String(body.title || ''),
      task_description: String(body.description || ''),
      task_type: String(body.task_type || 'general'),
      priority: String(body.priority || 'medium'),
      status: String(body.status || 'pending'),
      assigned_to_employee_id: body.assigned_to_employee_id ? Number(body.assigned_to_employee_id) : null,
      due_date: body.due_date || null,
      lead_id: body.lead_id ? Number(body.lead_id) : null,
      client_name: String(body.client_name || ''),
      business_impact: String(body.business_impact || 'medium'),
      estimated_value: Number(body.estimated_value || 0)
    }

    console.log('📋 Prepared task data:', JSON.stringify(taskData, null, 2))

    // Test JSON serialization before sending to database
    try {
      JSON.stringify(taskData)
      console.log('✅ Task data is JSON serializable')
    } catch (serializationError: any) {
      console.error('❌ Task data is not JSON serializable:', serializationError)
      return NextResponse.json(
        { error: 'Task data contains non-serializable values', details: serializationError.message },
        { status: 400 }
      )
    }

    console.log('🔄 Attempting to insert into ai_tasks table...')
    const { data: task, error } = await supabase
      .from('ai_tasks')
      .insert(taskData)
      .select('*')

    if (error) {
      console.error('❌ Supabase error creating AI task:', error)
      console.error('❌ Error details:', JSON.stringify(error, null, 2))
      return NextResponse.json(
        { error: 'Failed to create task', details: error.message, supabaseError: error },
        { status: 500 }
      )
    }

    // Since insert returns an array, get the first item
    const createdTask = Array.isArray(task) ? task[0] : task

    if (!createdTask) {
      console.error('❌ No task was created - empty result')
      return NextResponse.json(
        { error: 'Task creation failed - no data returned' },
        { status: 500 }
      )
    }

    console.log('✅ AI task created successfully:', createdTask.id)
    
    // Create a clean, serializable response object
    const responseTask = {
      id: createdTask.id,
      task_title: createdTask.task_title,
      task_description: createdTask.task_description,
      task_type: createdTask.task_type,
      priority: createdTask.priority,
      status: createdTask.status,
      assigned_to_employee_id: createdTask.assigned_to_employee_id,
      due_date: createdTask.due_date,
      lead_id: createdTask.lead_id,
      client_name: createdTask.client_name,
      business_impact: createdTask.business_impact,
      estimated_value: createdTask.estimated_value,
      created_at: createdTask.created_at,
      updated_at: createdTask.updated_at
    }

    return NextResponse.json(responseTask, { status: 201 })
  } catch (error: any) {
    console.error('❌ Exception in POST /api/tasks:', error)
    console.error('❌ Exception stack:', error.stack)
    return NextResponse.json(
      { error: 'Internal server error', details: error.message, stack: error.stack },
      { status: 500 }
    )
  }
} 