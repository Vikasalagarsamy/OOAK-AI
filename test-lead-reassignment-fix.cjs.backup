// Test script to verify lead reassignment fix works correctly
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testLeadReassignmentFix() {
  console.log('üß™ TESTING LEAD REASSIGNMENT FIX')
  console.log('=================================')

  try {
    // 1. Get the current active Ramya task assigned to Sridhar K
    console.log('\n1. üéØ Finding current Ramya task assigned to Sridhar K...')
    const { data: currentTask, error: taskError } = await supabase
      .from('ai_tasks')
      .select(`
        id, task_title, assigned_to_employee_id, quotation_id, lead_id, status,
        quotations(id, quotation_number, client_name, lead_id)
      `)
      .ilike('task_title', '%ramya%')
      .eq('status', 'pending')
      .eq('assigned_to_employee_id', 6) // Sridhar K
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (taskError || !currentTask) {
      console.log('‚ùå No active Ramya task found for Sridhar K')
      return
    }

    console.log('‚úÖ Found active task:')
    console.log(`  - Task ID: ${currentTask.id}`)
    console.log(`  - Title: ${currentTask.task_title}`)
    console.log(`  - Current lead_id: ${currentTask.lead_id}`)
    console.log(`  - Quotation lead_id: ${currentTask.quotations?.lead_id}`)
    console.log(`  - Status: ${currentTask.status}`)

    // 2. Check if the lead_id is properly set
    if (!currentTask.lead_id && currentTask.quotations?.lead_id) {
      console.log('\n‚ö†Ô∏è Task is missing lead_id! This is the bug we need to fix.')
      console.log('Running backfill update...')
      
      const { error: updateError } = await supabase
        .from('ai_tasks')
        .update({ lead_id: currentTask.quotations.lead_id })
        .eq('id', currentTask.id)

      if (updateError) {
        console.error('‚ùå Failed to update task:', updateError)
        return
      }
      
      console.log('‚úÖ Task updated with correct lead_id!')
      currentTask.lead_id = currentTask.quotations.lead_id // Update local copy
    }

    if (!currentTask.lead_id) {
      console.log('‚ùå No lead_id available - cannot test reassignment')
      return
    }

    // 3. Test the reassignment API
    console.log('\n2. üîÑ Testing task reassignment API...')
    console.log(`   Reassigning task ${currentTask.id} to Deepika (employee_id: 22)`)
    
    const reassignResponse = await fetch('http://127.0.0.1:3000/api/tasks/reassign', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        taskId: currentTask.id,
        newEmployeeId: 22 // Deepika Devi
      })
    })

    if (!reassignResponse.ok) {
      const errorText = await reassignResponse.text()
      console.error('‚ùå Reassignment API failed:', errorText)
      return
    }

    const reassignResult = await reassignResponse.json()
    console.log('‚úÖ Reassignment API response:', reassignResult)

    // 4. Verify the task was reassigned
    console.log('\n3. üîç Verifying task reassignment...')
    const { data: updatedTask, error: verifyTaskError } = await supabase
      .from('ai_tasks')
      .select('id, assigned_to_employee_id, assigned_to, lead_id')
      .eq('id', currentTask.id)
      .single()

    if (verifyTaskError) {
      console.error('‚ùå Failed to verify task:', verifyTaskError)
      return
    }

    console.log('‚úÖ Task after reassignment:')
    console.log(`  - Assigned to employee_id: ${updatedTask.assigned_to_employee_id}`)
    console.log(`  - Assigned to name: ${updatedTask.assigned_to}`)
    console.log(`  - Lead ID: ${updatedTask.lead_id}`)

    // 5. Verify the lead was reassigned
    console.log('\n4. üéØ Verifying lead reassignment...')
    const { data: updatedLead, error: verifyLeadError } = await supabase
      .from('leads')
      .select('id, assigned_to, client_name, employees(first_name, last_name)')
      .eq('id', currentTask.lead_id)
      .single()

    if (verifyLeadError) {
      console.error('‚ùå Failed to verify lead:', verifyLeadError)
      return
    }

    console.log('‚úÖ Lead after reassignment:')
    console.log(`  - Lead ID: ${updatedLead.id}`)
    console.log(`  - Client: ${updatedLead.client_name}`)
    console.log(`  - Assigned to employee_id: ${updatedLead.assigned_to}`)
    console.log(`  - Assigned to name: ${updatedLead.employees?.first_name} ${updatedLead.employees?.last_name}`)

    // 6. Final verification
    console.log('\n5. ‚úÖ FINAL VERIFICATION')
    const success = (
      updatedTask.assigned_to_employee_id === 22 && 
      updatedLead.assigned_to === 22 &&
      reassignResult.leadReassigned === true
    )

    if (success) {
      console.log('üéâ SUCCESS! Both task and lead were reassigned correctly!')
      console.log('‚úÖ Task reassignment works properly now!')
    } else {
      console.log('‚ùå FAILURE! Reassignment did not work correctly.')
      console.log('Task reassigned:', updatedTask.assigned_to_employee_id === 22)
      console.log('Lead reassigned:', updatedLead.assigned_to === 22)
      console.log('API confirmed lead reassignment:', reassignResult.leadReassigned)
    }

    // 7. Show who should now see the task and lead
    console.log('\n6. üë• WHO CAN NOW SEE WHAT:')
    console.log('‚úÖ Deepika Devi (Employee ID: 22) should now see:')
    console.log('   - The task in her Employee Dashboard')
    console.log('   - The Ramya lead in her My Leads page')
    console.log('‚úÖ Sridhar K (Employee ID: 6) should no longer see:')
    console.log('   - The task (it has been reassigned)')
    console.log('   - The lead (it has been reassigned)')

  } catch (error) {
    console.error('‚ùå Test failed:', error)
  }
}

testLeadReassignmentFix() 