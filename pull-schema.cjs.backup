const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
require('dotenv').config({ path: '.env.local' })

// Remote Supabase configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials in .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function pullSchema() {
  console.log('üîÑ Pulling database schema from remote Supabase...')
  
  try {
    // Get table definitions
    const { data: tables, error: tablesError } = await supabase.rpc('get_table_definitions')
    
    if (tablesError) {
      console.log('‚ö†Ô∏è Custom RPC not available, trying manual approach...')
      await manualSchemaPull()
      return
    }
    
    // Write schema to file
    const schemaSQL = tables.map(table => table.definition).join('\n\n')
    fs.writeFileSync('remote-schema.sql', schemaSQL)
    
    console.log('‚úÖ Schema pulled successfully to remote-schema.sql')
    
  } catch (error) {
    console.error('‚ùå Failed to pull schema:', error.message)
    console.log('üìã Using existing migrations instead...')
  }
}

async function manualSchemaPull() {
  console.log('üìã Getting basic table information...')
  
  // Get basic table info that we can access
  const tableQueries = [
    "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE'",
    "SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_schema = 'public'"
  ]
  
  let schemaInfo = '-- Remote Schema Information\n\n'
  
  for (const query of tableQueries) {
    try {
      const { data, error } = await supabase.rpc('execute_sql', { query })
      if (!error && data) {
        schemaInfo += `-- Query: ${query}\n`
        schemaInfo += JSON.stringify(data, null, 2) + '\n\n'
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è Query failed: ${query}`)
    }
  }
  
  fs.writeFileSync('remote-schema-info.txt', schemaInfo)
  console.log('‚ÑπÔ∏è Basic schema info saved to remote-schema-info.txt')
}

// Run the schema pull
pullSchema() 