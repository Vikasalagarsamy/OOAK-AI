#!/usr/bin/env node

/**
 * TEST DATABASE CONNECTION AND CREATE WHATSAPP TABLE
 * Direct test to solve the storage issue
 */

import { createClient } from '@supabase/supabase-js'

// Use environment variables
const supabaseUrl = 'https://aavofqdzjhyfjygkxynq.supabase.co'
const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhdm9mcWR6amh5Zmp5Z2t4eW5xIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIwMjc1MDYsImV4cCI6MjA0NzYwMzUwNn0.lYNdKH0x-mfaVkb4zjuF_sVG-FgLO9V60mKa6bABxEQ'
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhdm9mcWR6amh5Zmp5Z2t4eW5xIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMjAyNzUwNiwiZXhwIjoyMDQ3NjAzNTA2fQ.bSGWEJLFGIrLDTKo8cq1YVU6Vm_iGAI8_TcqPgOUhzM'

console.log('üîß TESTING DATABASE CONNECTION FOR WHATSAPP STORAGE')
console.log('='.repeat(60))

async function testWithKey(keyName, key) {
  console.log(`\nüîë Testing with ${keyName}...`)
  const supabase = createClient(supabaseUrl, key)
  
  try {
    const { data, error } = await supabase
      .from('leads')
      .select('count')
      .limit(1)
    
    if (error) {
      console.error(`‚ùå ${keyName} failed:`, error.message)
      return false
    }
    
    console.log(`‚úÖ ${keyName} works!`)
    return supabase
  } catch (err) {
    console.error(`‚ùå ${keyName} error:`, err.message)
    return false
  }
}

async function testLeadsInsert(supabase, keyName) {
  console.log(`\nüìù Testing INSERT with ${keyName}...`)
  
  try {
    const testLead = {
      name: `WhatsApp Test ${Date.now()}`,
      phone: '919677362524',
      email: `test_${Date.now()}@example.com`,
      source: 'whatsapp',
      status: 'active',
      notes: `Database test from ${keyName}`
    }
    
    const { data, error } = await supabase
      .from('leads')
      .insert(testLead)
      .select()
      .single()
    
    if (error) {
      console.log(`‚ö†Ô∏è ${keyName} INSERT failed:`, error.message)
      return false
    }
    
    console.log(`‚úÖ ${keyName} INSERT works! Record ID:`, data.id)
    
    // Read it back
    const { data: readData, error: readError } = await supabase
      .from('leads')
      .select('*')
      .eq('id', data.id)
      .single()
    
    if (!readError && readData) {
      console.log(`‚úÖ ${keyName} READ works! Found record:`, readData.name)
    }
    
    // Clean up
    await supabase.from('leads').delete().eq('id', data.id)
    console.log(`üßπ Cleaned up test record`)
    
    return true
  } catch (err) {
    console.log(`‚ùå ${keyName} INSERT error:`, err.message)
    return false
  }
}

async function main() {
  // Test both keys
  const anonSupabase = await testWithKey('ANON KEY', anonKey)
  const serviceSupabase = await testWithKey('SERVICE ROLE KEY', serviceRoleKey)
  
  if (!anonSupabase && !serviceSupabase) {
    console.log('\n‚ùå CRITICAL: Both keys failed!')
    console.log('üîß Check if Supabase project is accessible')
    process.exit(1)
  }
  
  // Test insertion with working key
  let workingSupabase = null
  let workingKeyName = ''
  
  if (serviceSupabase) {
    workingSupabase = serviceSupabase
    workingKeyName = 'SERVICE ROLE'
    const insertWorks = await testLeadsInsert(serviceSupabase, 'SERVICE ROLE')
    if (insertWorks) {
      console.log('\nüéâ SOLUTION: Use SERVICE ROLE KEY for database operations')
    }
  } else if (anonSupabase) {
    workingSupabase = anonSupabase
    workingKeyName = 'ANON'
    const insertWorks = await testLeadsInsert(anonSupabase, 'ANON')
    if (insertWorks) {
      console.log('\nüéâ SOLUTION: Use ANON KEY for database operations')
    }
  }
  
  console.log('\nüéØ NEXT STEPS:')
  console.log('1. Update webhook to use working Supabase key')
  console.log('2. Store WhatsApp messages in leads table (confirmed working)')
  console.log('3. Test real WhatsApp message storage')
  console.log('4. Verify AI can read stored messages')
}

main().catch(console.error) 