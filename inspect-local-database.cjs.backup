#!/usr/bin/env node

// Local Database Structure Inspector
// ==================================

const { createClient } = require('@supabase/supabase-js')

// Local Supabase configuration
const LOCAL_CONFIG = {
  url: 'http://127.0.0.1:54321',
  serviceKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU'
}

async function inspectDatabase() {
  console.log('üîç Inspecting Local Supabase Database Structure...\n')
  
  try {
    // Use service role key for full access
    const supabase = createClient(LOCAL_CONFIG.url, LOCAL_CONFIG.serviceKey)
    
    console.log('‚úÖ Connected to local Supabase with service role')
    console.log(`üìç Database URL: ${LOCAL_CONFIG.url}`)
    
    // Get all tables in public schema
    console.log('\nüìã Step 1: Getting all tables...')
    const { data: tables, error: tablesError } = await supabase
      .rpc('get_schema_tables', { schema_name: 'public' })
      .catch(async () => {
        // If RPC doesn't exist, use direct query
        return await supabase
          .from('information_schema.tables')
          .select('table_name')
          .eq('table_schema', 'public')
          .order('table_name')
      })
    
    if (tablesError) {
      // Alternative method - query information_schema directly
      console.log('‚ÑπÔ∏è  Using alternative method to get tables...')
      
      const { data: schemaInfo, error: schemaError } = await supabase
        .rpc('exec_sql', { 
          sql: `
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name;
          `
        })
        .catch(() => null)
      
      if (schemaError || !schemaInfo) {
        // Manual table discovery by trying known tables
        console.log('‚ÑπÔ∏è  Discovering tables manually...')
        
        const knownTables = [
          'companies', 'branches', 'employees', 'leads', 'lead_sources',
          'designations', 'departments', 'roles', 'users', 'notifications',
          'employee_companies', 'whatsapp_templates', 'vendors', 'quotations'
        ]
        
        const discoveredTables = []
        
        for (const tableName of knownTables) {
          try {
            const { data, error } = await supabase
              .from(tableName)
              .select('*')
              .limit(1)
            
            if (!error) {
              discoveredTables.push(tableName)
            }
          } catch (e) {
            // Table doesn't exist, continue
          }
        }
        
        await inspectTables(supabase, discoveredTables)
        return
      }
    }
    
    const tableList = tables?.map(t => t.table_name) || []
    await inspectTables(supabase, tableList)
    
  } catch (error) {
    console.error('üí• Error inspecting database:', error)
  }
}

async function inspectTables(supabase, tableNames) {
  console.log(`\nüìä Found ${tableNames.length} tables:`)
  tableNames.forEach((table, index) => {
    console.log(`   ${index + 1}. ${table}`)
  })
  
  console.log('\nüîç Step 2: Inspecting table structures and data...\n')
  
  for (const tableName of tableNames) {
    try {
      console.log(`\n${'='.repeat(50)}`)
      console.log(`üìã TABLE: ${tableName.toUpperCase()}`)
      console.log(`${'='.repeat(50)}`)
      
      // Get table structure
      console.log('\nüìù Column Structure:')
      const { data: columns, error: columnsError } = await supabase
        .rpc('exec_sql', {
          sql: `
            SELECT 
              column_name,
              data_type,
              is_nullable,
              column_default
            FROM information_schema.columns 
            WHERE table_name = '${tableName}' 
            AND table_schema = 'public'
            ORDER BY ordinal_position;
          `
        })
        .catch(() => null)
      
      if (columns && columns.length > 0) {
        columns.forEach(col => {
          const nullable = col.is_nullable === 'YES' ? '(nullable)' : '(required)'
          const defaultVal = col.column_default ? ` [default: ${col.column_default}]` : ''
          console.log(`   ‚Ä¢ ${col.column_name}: ${col.data_type} ${nullable}${defaultVal}`)
        })
      } else {
        // Alternative: Get sample data to infer structure
        const { data: sample, error: sampleError } = await supabase
          .from(tableName)
          .select('*')
          .limit(1)
        
        if (sample && sample.length > 0) {
          console.log('   Fields (inferred from sample data):')
          Object.keys(sample[0]).forEach(field => {
            const value = sample[0][field]
            const type = typeof value
            console.log(`   ‚Ä¢ ${field}: ${type} (value: ${value})`)
          })
        } else {
          console.log('   ‚ö†Ô∏è  Could not determine structure')
        }
      }
      
      // Get row count and sample data
      const { data: rowData, error: rowError, count } = await supabase
        .from(tableName)
        .select('*', { count: 'exact' })
        .limit(3)
      
      if (!rowError) {
        console.log(`\nüìä Row Count: ${count || rowData?.length || 0}`)
        
        if (rowData && rowData.length > 0) {
          console.log('\nüìÑ Sample Data (first 3 rows):')
          rowData.forEach((row, index) => {
            console.log(`\n   Row ${index + 1}:`)
            Object.entries(row).forEach(([key, value]) => {
              let displayValue = value
              if (typeof value === 'string' && value.length > 50) {
                displayValue = value.substring(0, 50) + '...'
              }
              console.log(`     ${key}: ${displayValue}`)
            })
          })
        } else {
          console.log('\nüìÑ No data found in this table')
        }
      } else {
        console.log(`\n‚ùå Error querying ${tableName}:`, rowError.message)
      }
      
    } catch (error) {
      console.log(`\n‚ùå Error inspecting ${tableName}:`, error.message)
    }
  }
  
  console.log('\n' + '='.repeat(60))
  console.log('üéØ DATABASE INSPECTION COMPLETE')
  console.log('='.repeat(60))
  console.log('\nüí° Summary:')
  console.log(`‚Ä¢ Total tables discovered: ${tableNames.length}`)
  console.log('‚Ä¢ Structure and sample data shown above')
  console.log('‚Ä¢ This is your local development database')
  console.log('‚Ä¢ Safe to experiment with - no production impact')
  
  console.log('\nüîß Next steps:')
  console.log('‚Ä¢ Use this structure info to build/debug your frontend')
  console.log('‚Ä¢ Field names are now confirmed for your queries')
  console.log('‚Ä¢ Studio available at: http://127.0.0.1:54323')
}

inspectDatabase() 